<server description="Server for BonusPayout sample">

    <!-- Enable features -->
    <featureManager>
        <feature>batchManagement-1.0</feature>
        <feature>localConnector-1.0</feature>
        <feature>appSecurity-2.0</feature>

        <!-- This sample can work without CDI configured, but the use of CDI is always strongly encouraged with batch. -->
        <feature>cdi-2.0</feature>

        <!-- Admin Center Java Batch tool, don't download by default  -->
<!--
        <feature>adminCenter-1.0</feature>
-->
    </featureManager>

<!-- A user of the Admin Center Java Batch tool must ALSO be an administrator.  This is independent of whatever batch roles,
     "batchAdmin", "batchSubmitter", etc. are mapped to this user. 
     Leave this commented out for now -->
<!--
    <administrator-role>
      <user>bob</user>
   </administrator-role>
-->

    <!-- To access this server from a remote client add a host attribute to
        the following element, e.g. host="*" -->
    <httpEndpoint httpPort="9080" httpsPort="9443" id="defaultHttpEndpoint"/>

    <library id="DerbyLib">
        <fileset dir="${shared.resource.dir}/derby"/>
    </library>

    <logging traceSpecification="BonusPayout=finer:com.ibm.ws.batch.JobLogger=finest"/>
    <!--
         Debug batch runtime:
    <logging traceSpecification="BonusPayout=all=enabled:com.ibm.jbatch.*=all:com.ibm.ws.jbatch.*=all"/>
         Debug batch runtime and JDBC:
    <logging traceSpecification="BonusPayout=all=enabled:com.ibm.jbatch.*=all:com.ibm.ws.jbatch.*=all:RRA=all:WAS.j2c=all"/>
    -->

    <dataSource id="batchDB" type="javax.sql.XADataSource">
        <jdbcDriver libraryRef="DerbyLib"/>
        <!-- The 'db.url' databaseName is set in bootstrap.properties -->
        <properties.derby.embedded createDatabase="create" databaseName="${db.url}" user="user" password="pass"/>
    </dataSource>

    <!--  In this sample we'll use the same database (as the runtime DB) but use a different DS to access it.
          Note that, while the database can be auto-created here, the application table within it needs to be
          by first running the Maven build (so the app will fail if first run in WDT without creating the tables).
    -->
    <dataSource id="appDB" jndiName="jdbc/batch" type="javax.sql.XADataSource">
        <jdbcDriver libraryRef="DerbyLib"/>
        <properties.derby.embedded createDatabase="create" databaseName="${db.url}" user="user" password="pass"/>
    </dataSource>

    <databaseStore dataSourceRef="batchDB" id="BatchDatabaseStore" schema="JBATCH" tablePrefix=""/>

    <batchPersistence jobStoreRef="BatchDatabaseStore"/>

    <applicationMonitor updateTrigger="mbean"/>

    <keyStore id="defaultKeyStore" password="Liberty"/>

    <basicRegistry id="basic" realm="ibm/api">
        <user name="bob" password="bobpwd"/>
        <user name="jane" password="janepwd"/>
        <user name="sam" password="sampwd"/>
    </basicRegistry>

    <authorization-roles id="com.ibm.ws.batch">
        <security-role name="batchAdmin">
            <user name="bob"/>
        </security-role>
        <security-role name="batchAdmin">
            <user name="jane"/>
        </security-role>
        <security-role name="batchSubmitter">
            <user name="sam"/>
        </security-role>
    </authorization-roles>

</server>
